// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.mejona.com/support",
            "email": "support@mejona.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Performs a comprehensive health check including system status, database connectivity, memory usage, error rates, and active alerts",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "Comprehensive system health check",
                "operationId": "healthCheck",
                "responses": {
                    "200": {
                        "description": "System is healthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "System is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/deep": {
            "get": {
                "description": "Performs comprehensive system analysis including database query performance testing, memory pressure analysis, error rate monitoring, and provides actionable recommendations",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "Deep system health analysis",
                "operationId": "deepHealthCheck",
                "responses": {
                    "200": {
                        "description": "Deep health check completed",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeepHealthResponse"
                        }
                    },
                    "503": {
                        "description": "System issues detected",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Lightweight status overview for load balancer health checks and monitoring systems",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "Quick status check",
                "operationId": "statusCheck",
                "responses": {
                    "200": {
                        "description": "Service status retrieved",
                        "schema": {
                            "$ref": "#/definitions/handlers.StatusResponse"
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Kubernetes readiness probe endpoint that checks if the service is ready to handle requests",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "Readiness probe",
                "operationId": "readinessCheck",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/alive": {
            "get": {
                "description": "Kubernetes liveness probe endpoint that checks if the service is alive and running",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "Liveness probe",
                "operationId": "livenessCheck",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Comprehensive system metrics including Go runtime statistics, database connection pool stats, performance metrics, business metrics, and error statistics",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Health"],
                "summary": "System metrics",
                "operationId": "metricsCheck",
                "responses": {
                    "200": {
                        "description": "System metrics retrieved",
                        "schema": {
                            "$ref": "#/definitions/handlers.MetricsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, returns JWT access and refresh tokens",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Authentication"],
                "summary": "User login",
                "operationId": "login",
                "parameters": [{
                    "description": "Login credentials",
                    "name": "body",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/handlers.LoginRequest"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Refresh expired access token using valid refresh token",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Authentication"],
                "summary": "Refresh access token",
                "operationId": "refreshToken",
                "parameters": [{
                    "description": "Refresh token request",
                    "name": "body",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/handlers.RefreshTokenRequest"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Invalidate current session tokens and log out user",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Authentication"],
                "summary": "User logout",
                "operationId": "logout",
                "security": [{"BearerAuth": []}],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/profile": {
            "get": {
                "description": "Retrieve current authenticated user profile information",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Authentication"],
                "summary": "Get user profile",
                "operationId": "getProfile",
                "security": [{"BearerAuth": []}],
                "responses": {
                    "200": {
                        "description": "User profile retrieved",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contacts": {
            "get": {
                "description": "Retrieve a paginated list of contacts with optional filtering and sorting. Supports filtering by status, type, source, assigned user, and creation date. Sorting options include creation date, update date, name, and email.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Contacts"],
                "summary": "List contacts",
                "operationId": "listContacts",
                "security": [{"BearerAuth": []}],
                "parameters": [
                    {
                        "type": "integer",
                        "minimum": 1,
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 1,
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": ["asc", "desc"],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": ["new", "contacted", "qualified", "customer", "inactive"],
                        "type": "string",
                        "description": "Filter by contact status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by contact type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by contact source",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by assigned user ID",
                        "name": "assigned_to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contacts retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ContactListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new contact with comprehensive information including personal details, company information, and custom metadata",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["Contacts"],
                "summary": "Create new contact",
                "operationId": "createContact",
                "security": [{"BearerAuth": []}],
                "parameters": [{
                    "description": "Contact data",
                    "name": "body",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/handlers.CreateContactRequest"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Contact created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ContactResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response data"
                },
                "message": {
                    "type": "string",
                    "description": "Human-readable message"
                },
                "success": {
                    "type": "boolean",
                    "description": "Indicates if the request was successful"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Response timestamp"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response data"
                },
                "error_code": {
                    "type": "string",
                    "description": "Machine-readable error code"
                },
                "message": {
                    "type": "string",
                    "description": "Human-readable message"
                },
                "success": {
                    "type": "boolean",
                    "description": "Indicates if the request was successful",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Response timestamp"
                }
            }
        },
        "handlers.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response data"
                },
                "error_code": {
                    "type": "string",
                    "description": "Machine-readable error code"
                },
                "field_errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.FieldError"
                    },
                    "description": "Validation errors for specific fields"
                },
                "message": {
                    "type": "string",
                    "description": "Human-readable message"
                },
                "success": {
                    "type": "boolean",
                    "description": "Indicates if the request was successful",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Response timestamp"
                }
            }
        },
        "handlers.FieldError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Validation rule that failed"
                },
                "field": {
                    "type": "string",
                    "description": "Field name with validation error"
                },
                "message": {
                    "type": "string",
                    "description": "Validation error message"
                },
                "value": {
                    "description": "Invalid value provided"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": ["email", "password"],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address",
                    "example": "admin@mejona.com"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "User password",
                    "example": "password123"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "tokens": {
                            "$ref": "#/definitions/handlers.TokenPair"
                        },
                        "user": {
                            "$ref": "#/definitions/models.AdminUser"
                        }
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "handlers.TokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "description": "JWT access token"
                },
                "expires_in": {
                    "type": "integer",
                    "description": "Access token expiration time in seconds"
                },
                "refresh_token": {
                    "type": "string",
                    "description": "JWT refresh token"
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "models.AdminUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "enum": ["admin", "manager", "agent", "viewer"]
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "handlers.CreateContactRequest": {
            "type": "object",
            "required": ["name", "email"],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 255,
                    "description": "Contact full name",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Contact email address",
                    "example": "john.doe@example.com"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "Contact phone number",
                    "example": "+1-555-123-4567"
                },
                "company": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Company name",
                    "example": "Acme Corporation"
                },
                "position": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Job position/title",
                    "example": "Marketing Director"
                },
                "type_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Contact type ID"
                },
                "source_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Contact source ID"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes"
                },
                "metadata": {
                    "type": "object",
                    "description": "Custom fields"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

var doc = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Contact Management Microservice API",
	Description:      "Professional contact management microservice for Mejona Technology with comprehensive features including contact management, search, assignment, lifecycle management, scheduling, analytics, and monitoring.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(doc.InstanceName(), doc)
}